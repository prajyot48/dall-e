import React, { useEffect, useState } from 'react'
import Card from '../components/Card'
import FormField from '../components/FormField'
import Loader from '../components/Loader'

const RenderCard =({data,title})=>{
    if(data?.length > 0){
        return data.map((post)=><Card key={post.id} {...post}/>)
    }
    return (
        <h2 className="mt-5 font-bold text-[#6449ff] text-xl uppercase">{title}</h2>
    )
}


const Home = () => {
    const [loading, setLoading] = useState(false)
    const [allPosts, setAllPosts] = useState(null) 
    const [searchText, setsearchText] = useState('')
    const [searchResults, setSearchedResults] = useState(null)
    const [searchTimeout, setSearchTimeout ] = useState(null)

    const handleSearchChange = (e) => {
        clearTimeout(searchTimeout);
        setsearchText(e.target.value);
    
        setSearchTimeout(
          setTimeout(() => {
            const Res = allPosts.filter((item) => item.name.toLowerCase().includes(searchText.toLowerCase()) || item.prompt.toLowerCase().includes(searchText.toLowerCase()));
            setSearchedResults(Res);
          }, 500),
        );
      };

    const fetchpost =async()=>{
        setLoading(true)
        try{
            const response = await fetch('http://localhost:8080/api/v1/post',{
                method:'GET',
                headers:{
                    'Content-Type':'application/json',
                }
            })
            if (response.ok){
                const result = await response.json();
                setAllPosts(result.data.reverse())
            }
        }catch(err){
            alert(err)
        }
        finally{
            setLoading(false)
        }
    }

    useEffect(() => {
        fetchpost();
    }, [])

  return (
    <section>
        <div>
            <h1 className="font-extrabold text-[#222328] text-[32px]">The Community Showcase</h1>
            <p className="mt-2 text-[#666e75] text-[16px] max-W[500px]">Browse through a collection of imaginative and visually stunning images generated by DALL-E AI</p>
        </div>

        <div className="mt-16">
            <FormField
            labelName="Search posts"
            type="text"
            name="text"
            placeholder="Search posts"
            value={searchText}
            handleChange={handleSearchChange}
            />
        </div>

        <div className="mt-10">
            {loading ? (
                <div className="flex justify-center items-center">
                    <Loader/>
                </div>
            ):
            <div>
                {searchText && (
                    <h2 className="font-medium text-[#666e75] text-xl mb-3">
                        Showing results for <span className="text-[#222328]">{searchText}</span>
                    </h2>
                )}
                <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3">
                    {
                        searchText ? (
                        <RenderCard 
                            data={searchResults}
                            title="No Search results found"
                            />
                        ):( 
                            <RenderCard 
                            data={allPosts}
                            title="No posts found"
                            />
                        )
                    }

                </div>
            </div>
        }
        </div>
    </section>
  )
}

export default Home